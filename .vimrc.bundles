if &compatible
  set nocompatible
end

" Remove declared plugins
function! s:UnPlug(plug_name)
  if has_key(g:plugs, a:plug_name)
    call remove(g:plugs, a:plug_name)
  endif
endfunction
command!  -nargs=1 UnPlug call s:UnPlug(<args>)

let g:has_async = v:version >= 800 || has('nvim')

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" All the plugins are specified as full URLs because I can Cmd+click on them.
" Each plugin is followed up with it's settings, making individual plugins'
" settings easier to manage, i.e. no need to find which settigns belong to
" which plugin across .vimrc.
call plug#begin('~/.vim/plugged')

    function! Cond(cond, ...)
      let opts = get(a:000, 0, {})
      return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
    endfunction

    Plug 'https://github.com/chriskempson/base16-vim'

    " configure airline to reduce unnecessary noise (i.e. % of scroll, etc.)
    " h: airline-default-sections
    Plug 'https://github.com/vim-airline/vim-airline' | Plug 'https://github.com/vim-airline/vim-airline-themes'
        let g:airline_powerline_fonts = 1
        let g:airline_theme='base16_tomorrow_night'
        let g:airline#extensions#tabline#enabled = 1
        let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
        let g:airline#extensions#coc#enabled = 1
        let g:airline#extensions#tabline#buffer_nr_format = '%s '
        let g:airline#extensions#tabline#buffer_nr_show = 1
        let g:airline#extensions#tabline#tab_nr_type = 1
        let g:airline#extensions#tabline#show_tab_nr = 1
        let g:airline#extensions#tabline#fnametruncate = 16
        let g:airline#extensions#tabline#fnamecollapse = 2
        let g:airline#extensions#tabline#buffer_idx_mode = 1
        let g:airline_extensions = ['branch', 'tabline', 'hunks', 'fugitiveline', 'coc']
        let g:airline#extensions#disable_rtp_load = 1

    Plug 'https://github.com/tpope/vim-fugitive'

    Plug'https://github.com/mhinz/vim-startify'
        " autocmd BufDelete * if empty(filter(tabpagebuflist(), '!buflisted(v:val)')) | Startify | endif
        let g:startify_change_to_dir = 0
        let g:startify_lists = [
              \ { 'type': 'dir',       'header': ['   MRU '. getcwd()] },
              \ { 'type': 'files',     'header': ['   MRU']            },
              \ { 'type': 'sessions',  'header': ['   Sessions']       },
              \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
              \ { 'type': 'commands',  'header': ['   Commands']       },
          \ ]
        let g:startify_files_number = 5
        let g:startify_bookmarks = [
              \ { 'c': '~/.vimrc' },
              \ { 'b': '~/.vimrc.bundles' },
          \ ]
        let g:startify_custom_header = [
            \ '    ██╗   ██╗   ██╗   ███╗   ███╗',
            \ '    ██║   ██║   ██║   ████╗ ████║',
            \ '    ██║   ██║   ██║   ██╔████╔██║',
            \ '    ╚██╗ ██╔╝   ██║   ██║╚██╔╝██║',
            \ '     ╚████╔╝    ██║   ██║ ╚═╝ ██║',
            \ '      ╚═══╝     ╚═╝   ╚═╝     ╚═╝',
            \ ]

    Plug 'https://github.com/jmcantrell/vim-virtualenv', { 'for': 'python' }

    Plug 'https://github.com/vim-vdebug/vdebug'
        let g:vdebug_keymap = {
            \  "run" : "<Leader>d/",
            \  "run_to_cursor" : "<Down>",
            \  "step_over" : "<Up>",
            \  "step_into" : "<Left>",
            \  "step_out" : "<Right>",
            \  "close" : "<Leader>dq",
            \  "detach" : "<Leader>dd",
            \  "set_breakpoint" : "<Leader>db",
            \  "eval_visual" : "<Leader>dv"
            \}
        " Allows Vdebug to bind to all interfaces.
        let g:vdebug_options = { 'port' : 9003 }

        " Stops execution at the first line.
        let g:vdebug_options['break_on_open'] = 1
        let g:vdebug_options['max_children'] = 128

        " Use the compact window layout.
        let g:vdebug_options['watch_window_style'] = 'compact'

        " This is what we use for webapp
        let g:vdebug_options['ide_key'] = 'default'

        " Need to set as empty for this to work with Vagrant boxes.
        let g:vdebug_options['server'] = ""

    " Plug 'https://github.com/terryma/vim-multiple-cursors

    Plug 'https://github.com/junegunn/fzf', { 'do': { -> fzf#install() } } | Plug 'https://github.com/junegunn/fzf.vim'
        " Todo explore an option of always using :Files (it seems to be just faster compared to :GFiles)
        nnoremap <silent> <C-p> :Files!<CR>
        "if exists('g:loaded_fugitive')
            "nnoremap <expr> <C-p> fugitive#head() != '' ? ':GFiles! --cached --others --exclude-standard<CR>' : ':Files!<CR>'
            "nnoremap <expr> <C-o> fugitive#head() != '' ? ':GFiles!?<CR>' : ''
        "else
            "silent! !git rev-parse --is-inside-work-tree
            "if v:shell_error == 0
              "nnoremap <silent> <C-p> :GFiles! --cached --others --exclude-standard<CR>
              "nnoremap <silent> <C-o> :GFiles!?<CR>
            "else
              "nnoremap <silent> <C-p> :Files!<CR>
              "nnoremap <silent> <C-o> :echo "Not a GIT repo ¯\\_(ツ)_/¯"<CR>
            "endif
        "endif
        nnoremap <silent> <leader>bb :Buffers!<CR>
        "Getting used to leader+dot, it seems to be a better alternate as it's
        "a comma-dot which are close to each other on the keyboard and it's a
        "1 less keystroke. I tend to use it a lot, so faster alternative
        "should be better.
        nnoremap <silent> <leader>. :Buffers<CR>
        nnoremap <silent> <leader>m :Marks<CR>
        nnoremap <silent> <leader>j :Jumps<CR>
        nnoremap <silent> <leader>bl :BLines!<CR>
        nnoremap <silent> <leader>ll :Lines!<CR>
        nnoremap <silent> <leader>/ :History/<CR>

        command! -bang -nargs=* Rg
                    \ call fzf#vim#grep(
                    \   'rg --column --line-number --hidden --ignore-case --no-heading --color=always '.shellescape(<q-args>), 1,
                    \   <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')
                    \           : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%:hidden', '?'),
                    \   <bang>0)

        function! RipgrepFzf(query, fullscreen)
            let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case %s || true'
            let initial_command = printf(command_fmt, shellescape(a:query))
            let reload_command = printf(command_fmt, '{q}')
            let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
            call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
        endfunction
        command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

        nnoremap <silent> <leader>ff :Rg!<CR>
        nnoremap <silent> <leader>FF :RG!<CR>

        " find directory
        function! s:append_dir_with_fzf(line)
            call fzf#run(fzf#wrap({
                        \ 'options': ['--prompt', a:line.'> '],
                        \ 'source': 'find . -type d',
                        \ 'sink': {line -> feedkeys("\<esc>:".a:line.line, 'n')}}))
            return ''
        endfunction
        cnoremap <expr> <c-x><c-d> <sid>append_dir_with_fzf(getcmdline())

        command! -nargs=* -complete=dir Cd
                    \ call fzf#run(fzf#wrap({
                          \ 'source': 'find '.(empty(<f-args>) ? '.' : <f-args>).' -type d -exec echo {}/ \;',
                          \ 'sink': 'NERDTreeFind'
                    \ }))

        nnoremap <leader>fd Cd .<CR>

    Plug 'https://github.com/preservim/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind', 'NERDTreeCWD'] }
        \ | Plug 'https://github.com/Xuyuanp/nerdtree-git-plugin'
        noremap <silent> <F2> :NERDTreeToggle <CR>
        " Tree Toggle.
        nnoremap <silent> <leader>tt :NERDTreeToggle <CR>
        " Tree Reveal.
        nnoremap <silent> <leader>TT :NERDTreeFind <CR>
        " Tree CWD.
        nnoremap <silent> <leader>tc :NERDTreeCWD <CR>:echo "Changed NERD tree CWD"<CR>

        let NERDTreeWinSize=40
        let NERDTreeShowHidden=1
        let NERDTreeQuitOnOpen=1
        let NERDTreeSortHiddenFirst=0
        let NERDTreeAutoDeleteBuffer = 1
        let NERDTreeIgnore=['\.pyc$', '\.bak$', '.git[[dir]]']
        let NERDTreeMinimalUI=1
        let NERDTreeMinimalMenu=0
        let g:NERDTreeShowIgnoredStatus = 1

        " NERDTress File highlighting
        " https://github.com/preservim/nerdtree/issues/433#issuecomment-92590696
        "function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
            "exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
            "exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
        "endfunction

        " If the only remaining buffer is NERDTree, exit vim.
        autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
        " If more than one window and previous buffer was NERDTree, go back to
        " it. Prevents opening buffers in NERDTree.
        autocmd BufEnter * if bufname('#') =~# "^NERD_tree_" && winnr('$') > 1 | b# | endif

        augroup nerdtreeconcealbrackets
            autocmd!
            autocmd FileType nerdtree syntax match hideBracketsInNerdTree "\]" contained conceal containedin=ALL
            autocmd FileType nerdtree syntax match hideBracketsInNerdTree "\[" contained conceal containedin=ALL
            autocmd FileType nerdtree setlocal conceallevel=3
            autocmd FileType nerdtree setlocal concealcursor=nvic
        augroup END

    Plug 'https://github.com/preservim/nerdcommenter'
        nmap <silent> <C-_> :call NERDComment("n","Invert") <CR>
        nmap <silent> <D-_> :call NERDComment("n","Invert") <CR>

    " golang
    " omitted 'do': ':GoUpdateBinaries',
    Plug 'https://github.com/fatih/vim-go', {  'for': 'go' }
        autocmd FileType go nmap <leader>i :GoImport 
        " autocmd FileType go nmap <leader>gi <Plug>(go-info)
        " autocmd FileType go nmap <leader>gd <Plug>(go-def)
        " run :GoBuild or :GoTestCompile based on the go file
        function! s:build_go_files()
          let l:file = expand('%')
          if l:file =~# '^\f\+_test\.go$'
            call go#test#Test(0, 1)
          elseif l:file =~# '^\f\+\.go$'
            call go#cmd#Build(0)
          endif
        endfunction

        autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
        autocmd FileType go nmap <leader>s :GoSameIds<CR>
        autocmd FileType go nmap <leader>r :GoRun<CR>
        autocmd FileType go nmap fs :GoFillStruct<CR>

        """ DEBUGGING """
        " BreakPoint
        autocmd FileType go nmap bp :GoDebugBreakpoint<CR>

        autocmd FileType go nmap <leader>ds :GoDebugStart
        autocmd FileType go nmap <leader>dt :GoDebugTestFunc<cr>

        autocmd FileType go nmap dp :call go#debug#Print(expand('<cword>'))<CR>
        autocmd FileType go xnoremap dp :call go#debug#Print("call " .  expand(getline("'<")[getpos("'<")[2]-1:getpos("'>")[2]-1]))<cr>

        autocmd FileType go nmap dc :GoDebugContinue<CR>
        autocmd FileType go nmap dn :GoDebugNext<CR>

        " quit and restat
        autocmd FileType go nmap dq :GoDebugStop<CR>
        autocmd FileType go nmap dr :GoDebugRestart<CR>
        " step in and step out
        autocmd FileType go nmap di :GoDebugStep<CR>
        autocmd FileType go nmap do :GoDebugStepOut<CR>

        let g:go_debug_windows = {
            \ 'vars':       'rightbelow 60vnew',
            "\ 'stack':      'botleft 6new',
        \ }

        let g:go_def_mode='gopls'
        let g:go_info_mode='gopls'
        let g:go_def_mapping_enabled = 0
        " disable auto type info in case if it causes problems.
        let g:go_auto_type_info = 1
        let g:go_fmt_command = "goimports"
        let g:go_highlight_types = 1
        let g:go_highlight_fields = 1
        let g:go_highlight_functions = 1
        let g:go_highlight_function_calls = 1
        let g:go_highlight_extra_types = 1

    " Plug 'https://github.com/tpope/vim-surround'

    Plug 'https://github.com/plasticboy/vim-markdown', { 'for': 'markdown' }

    " @TODO: find out which one is better works for me (cucumber, etc)
    " Plug 'https://github.com/junegunn/vim-easy-align'
    " Plug 'https://github.com/godlygeek/tabular'

    " annoying enables table mode while interacting with nerdtree (no idea why, tho)
    " disabled for now
    Plug 'https://github.com/dhruvasagar/vim-table-mode', { 'for': 'markdown' }
        " Options: https://github.com/dhruvasagar/vim-table-mode/blob/master/t/config/options.vim
        " autocmd FileType markdown :TableModeEnable
         "autocmd FileType markdown let g:table_mode_corner="|"
        " tt is taken for Tree Toggle. Don't use t prefix at all.
        let g:table_mode_disable_mappings = 0
        let g:table_mode_tableize_map = '<Leader>ti'
        let g:table_mode_tableize_d_map = '<Leader>Ti'

    Plug 'https://github.com/vim-scripts/kwbdi.vim'

    " Plug 'https://github.com/sheerun/vim-polyglot'

    " Extensions: https://github.com/neoclide/coc.nvim/wiki/Using-coc-extensions
    Plug 'https://github.com/neoclide/coc.nvim', {'branch': 'release'}
        " Useful commands:
        " :CocList sources
        " :CocList services
        if executable('/usr/local/bin/node')
            let g:coc_node_path = '/usr/local/bin/node'
        endif
        let g:coc_global_extensions = [
                    \ 'coc-fish',
                    \ 'coc-git',
                    \ 'coc-html',
                    \ 'coc-json',
                    \ 'coc-phpls',
                    \ 'coc-protobuf',
                    \ 'coc-pyright',
                    \ 'coc-tsserver',
                    \ 'coc-yaml',
                    \ 'coc-zig',
                    \]
        let g:coc_filetype_map = {
                    \ 'yaml.ansible': 'ansible',
                    \ }
        " load additional configuration
        if filereadable(expand("~/.vim/coc-user-config.vim"))
          source ~/.vim/coc-user-config.vim
        endif
        " Make <CR> to accept selected completion item or notify coc.nvim to format
        " <C-g>u breaks current undo, please make your own choice
        inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                                      \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
        " GoTo code navigation.
        nmap <silent> <leader>gd :call CocActionAsync('jumpDefinition')<CR>
        nmap <silent> <leader>gr :call CocActionAsync('jumpReferences')<CR>
        nmap <leader>rn <Plug>(coc-rename)
        nmap <silent> <leader>gy <Plug>(coc-type-definition)
        nmap <silent> <leader>gi <Plug>(coc-implementation)
        " allows scrolling PUM without mouse.
        "inoremap <nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1, 1)\<cr>" : "\<Right>"
        "inoremap <nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0, 1)\<cr>" : "\<Left>"

        if has('nvim-0.4.0') || has('patch-8.2.0750')
          nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
          nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
          inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
          inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
          vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
          vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
        endif

        " Applying code actions to the selected code block
        " Example: `<leader>aap` for current paragraph
        xmap <leader>a  <Plug>(coc-codeaction-selected)
        nmap <leader>a  <Plug>(coc-codeaction-selected)

        " Remap keys for applying code actions at the cursor position
        nmap <leader>ac  <Plug>(coc-codeaction-cursor)
        " Remap keys for apply code actions affect whole buffer
        nmap <leader>as  <Plug>(coc-codeaction-source)
        " Apply the most preferred quickfix action to fix diagnostic on the current line
        nmap <leader>qf  <Plug>(coc-fix-current)

        " Remap keys for applying refactor code actions
        nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
        xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
        nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

        " Use K to show documentation in preview window.
        nnoremap <silent> K :call <SID>show_documentation()<CR>
        function! s:show_documentation()
            if (index(['vim','help'], &filetype) >= 0)
                execute 'h '.expand('<cword>')
            else
                call CocAction('doHover')
            endif
        endfunction

        " Use tab for trigger completion with characters ahead and navigate
        " NOTE: There's always complete item selected by default, you may want to enable
        " no select by `"suggest.noselect": true` in your configuration file
        " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
        " other plugin before putting this into your config
        inoremap <silent><expr> <TAB>
              \ coc#pum#visible() ? coc#pum#next(1) :
              \ CheckBackspace() ? "\<Tab>" :
              \ coc#refresh()
        inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

        inoremap <silent><expr> <c-space> coc#refresh()

        function! s:check_back_space() abort
            let col = col('.') - 1
            return !col || getline('.')[col - 1]  =~# '\s'
        endfunction

        " https://vi.stackexchange.com/questions/21457/how-to-remap-autocomplete-on-controln-to-controlspace
        map <Nul> <c-space>
        map! <Nul> <c-space>
        inoremap <silent><expr> <c-space> coc#refresh()
        nnoremap <silent> <leader>k :call CocAction('showSignatureHelp')<CR>
        inoremap <silent> <C-k> <Esc>:call CocActionAsync('showSignatureHelp')<CR>a

        augroup CocAu
            autocmd!
            autocmd CursorHold * silent call CocActionAsync('highlight')
            "autocmd CursorHoldI * silent call CocAction('showSignatureHelp')
            "autocmd User CocJumpPlaceholder silent call CocActionAsync('showSignatureHelp')
        augroup END

        " navigate to a symbol in current buffer.
        nnoremap <leader>gs :CocList --auto-preview outline<CR>
        nnoremap gs :CocList -I --top --auto-preview --ignore-case symbols<CR>

        " GIT --- https://github.com/neoclide/coc-git "
        " navigate chunks of current buffer
        nmap [g <Plug>(coc-git-prevchunk)
        nmap ]g <Plug>(coc-git-nextchunk)
        " navigate conflicts of current buffer
        nmap [c <Plug>(coc-git-prevconflict)
        nmap ]c <Plug>(coc-git-nextconflict)
        " show commit contains current position
        nmap gc <Plug>(coc-git-commit)

        " Show chunk info under cursor.
        nmap ci :CocCommand git.chunkInfo<cr>
        " Undo current chunk.
        nmap cu :CocCommand git.chunkUndo<cr>
        " Stage current chunk.
        nmap cs :CocCommand git.chunkStage<cr>
        " Unstage chunk that contains current line.
        nmap cS :CocCommand git.chunkUnstage<cr>
        " Fold unchanged lines of current buffer.
        nmap fu :CocCommand git.foldUnchanged<cr>

        nmap ]d :call CocAction('diagnosticNext')<CR>
        nmap [d :call CocAction('diagnosticPrevious')<CR>

        " Don't pass messages to |ins-completion-menu|.
        set shortmess+=c

        " Always show the signcolumn, otherwise it would shift the text each time
        " diagnostics appear/become resolved.
        set signcolumn=yes

        " TODO: create a menu / mapping.
        " https://github.com/neoclide/coc-git

    Plug 'https://github.com/yaegassy/coc-ansible', {'do': 'yarn install --frozen-lockfile'}

    Plug 'https://github.com/airblade/vim-gitgutter'

    "if g:has_async
        "Plug 'https://github.com/desmap/ale-sensible' | Plug 'https://github.com/dense-analysis/ale'
            "let b:ale_fixers = {'php': ['phpcbf']}
    "else
        "Plug 'https://github.com/vim-syntastic/syntastic'
            "autocmd FileType php let g:syntastic_php_checkers = ['php']
    "endif

    " Using both since not yet decided which one I prefer better.
    "Plug 'https://github.com/simnalamburt/vim-mundo', { 'on': 'MundoToggle' }
        "let g:mundo_width = 40
        "let g:mundo_preview_height = 15
        "let g:mundo_right = 1
        "let g:mundo_close_on_revert = 1
        "let g:mundo_playback_delay = 200
        "let g:mundo_preview_bottom = 1
        "nnoremap <silent> <leader>U :MundoToggle <CR>

    "Plug 'https://github.com/mbbill/undotree', { 'on': 'UndotreeToggle' }
        "nnoremap <silent> <leader>u :UndotreeToggle <CR>
        "let g:undotree_WindowLayout = 4
        "let g:undotree_SetFocusWhenToggle = 1
        "let g:undotree_ShortIndicators = 1
        "let g:undotree_SplitWidth = 40
        "let g:undotree_DiffAutoOpen = 1

        "let s:debug = 0
        "let s:debugfile = '/tmp/undotree_debug.log'

    Plug 'https://github.com/liuchengxu/vista.vim'
        ":help vista-commands

        " show symbols.
        nnoremap <silent> <leader>SS :Vista!! <CR>
        " finder is more useful as navigation through Vista sidebar is more
        " cumbersome.
        nnoremap <silent> <leader>ss :Vista finder fzf:coc <CR>

        let g:vista_default_executive = 'coc'
        let g:vista_floating_delay = 0
        " blink 0 times by 0 milliseconds.
        let g:vista_blink = [0, 0]
        let g:vista_close_on_jump = 1
        " g:vista_php_executive = 'coc'
        let g:vista_executive_for = {
                    \ 'php': 'coc',
                    \ }
        let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]
        let g:vista_fzf_preview = ['right:50%']
        let g:vista#renderer#enable_icon = 1
        let g:vista_keep_fzf_colors = 1
        let g:vista#renderer#icons = {
                    \  "function": "\uf794",
                    \  "variable": "\uf71b",
                    \ }
        let g:vista_update_on_text_changed = 1
        let g:vista_update_on_text_changed_delay = 250
        let g:vista_ignore_kinds = ['Variable']
        let g:vista_sidebar_width = 40

    Plug 'https://github.com/luochen1990/rainbow'
        let g:rainbow_conf = {
        \   'separately': {
        \       'c': 0,
        \       'cpp': 0,
        \       'go': 0,
        \       'java': 0,
        \       'javascript': 0,
        \       'javascriptreact': 0,
        \       'nerdtree': 0,
        \       'php': 0,
        \       'python': 0,
        \       'rust': 0,
        \       'typescript': 0,
        \       'typescriptreact': 0,
        \       'vim': 0,
        \       'lisp': {
        \           'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
        \       },
        \       'scheme': {
        \           'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
        \       },
        \   }
        \}
        let g:rainbow_active = 1

    Plug 'https://github.com/chrisbra/Colorizer'

    Plug 'https://github.com/junegunn/limelight.vim'
        let g:limelight_conceal_ctermfg = 'gray'
        let g:limelight_conceal_ctermfg = 240

    " Inportant: devicons should stay at the bottom, because otherwise, if
    " loaded BEFORE nerdtree + nerdtree git, it would break icons alignment!
    Plug 'https://github.com/ryanoasis/vim-devicons'
        " after a re-source, fix syntax matching issues (concealing brackets):
        if exists('g:loaded_webdevicons')
            call webdevicons#refresh()
        endif

    " Plug 'https://github.com/liuchengxu/vim-which-key', { 'on': ['WhichKey', 'WhichKey!'] }

    " Let's give it a go
    Plug 'https://github.com/SirVer/ultisnips' | Plug 'https://github.com/honza/vim-snippets'
        let g:UltiSnipsExpandTrigger="<c-l>"
        let g:UltiSnipsListSnippets="<c-h>"
        "let g:UltiSnipsEnableSnipMate=1

    Plug 'https://github.com/hashivim/vim-terraform', { 'for': 'terraform' }

    Plug 'https://github.com/github/copilot.vim'
        if executable('/usr/local/bin/node')
            let g:copilot_node_command = '/usr/local/bin/node'
        endif
        let g:copilot_no_tab_map = v:true
        " <Tab> is super annoying. <C-I> should be okay.
        imap <silent><script><expr> <C-I> copilot#Accept("\<CR>")
        let g:copilot_filetypes = {
              \ 'scheme': v:false,
              \ 'lisp': v:false,
              \ }

    if filereadable(expand("~/.vimrc.bundles.local"))
      source ~/.vimrc.bundles.local
    endif

    " https://github.com/norcalli/nvim-colorizer.lua

    " ervandew/supertab
    " Chiel92/vim-autoformat
    " editorconfig/editorconfig-vim
    " stephpy/vim-php-cs-fixer
    " jwalton512/vim-blade
    " isRuslan/vim-es6
    " mxw/vim-jsx

:call plug#end()
